<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Malware on Gabriel Lopez</title><link>https://gabealopez.github.io/tags/malware/</link><description>Recent content in Malware on Gabriel Lopez</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 14 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://gabealopez.github.io/tags/malware/index.xml" rel="self" type="application/rss+xml"/><item><title>Sandbox Evasion</title><link>https://gabealopez.github.io/posts/sandbox-evasion/</link><pubDate>Mon, 14 Jul 2025 00:00:00 +0000</pubDate><guid>https://gabealopez.github.io/posts/sandbox-evasion/</guid><description>Sandboxing is a proven way to detect malware and prevent its execution. However, malicious actors search for ways to teach their malware to stay inactive in the sandbox. Sandbox-evading malware can bypass protections and execute malicious code without being detected by modern cybersecurity solutions.
In this article, we analyze techniques used by malware to avoid sandbox analysis and share best practices we use at Apriorit to build sandboxes that can detect and stop evading malware.</description></item><item><title>Anti Debugging</title><link>https://gabealopez.github.io/posts/anti-debugging/</link><pubDate>Sun, 13 Jul 2025 00:00:00 +0000</pubDate><guid>https://gabealopez.github.io/posts/anti-debugging/</guid><description>What is Anti-Debugging?
Debugging malware code enables a malware analyst to run the malware step by step, introduce changes to memory space, variable values, configurations and more. Therefore, if debugging is done successfully, it facilitates the understanding of the malware’s behavior, mechanisms and capabilities. For obvious reasons, this is something malware authors would want to prevent. Anti-Debugging techniques are meant to ensure that a program is not running under a debugger, and in the case that it is, to change its behavior correspondingly.</description></item><item><title>Heavens Gate Technique</title><link>https://gabealopez.github.io/posts/heavens-gate/</link><pubDate>Sat, 12 Jul 2025 00:00:00 +0000</pubDate><guid>https://gabealopez.github.io/posts/heavens-gate/</guid><description>When Microsoft introduced 64-bit Windows, backward compatibility for 32-bit applications remained essential. This compatibility layer, called WOW64 (Windows-On-Windows 64-bit), allowed older software to function seamlessly. Underneath this compatibility abstraction, however, an opportunity emerged for attackers.
Security solutions frequently focused their defenses around 32-bit behaviors, neglecting less commonly exploited 64-bit operations. Heaven’s Gate was born from this oversight, enabling threat actors to break free from WOW64’s restrictions and execute unmonitored 64-bit code.</description></item><item><title>Black Hat Zig</title><link>https://gabealopez.github.io/posts/black-hat-zig/</link><pubDate>Wed, 09 Jul 2025 00:00:00 +0000</pubDate><guid>https://gabealopez.github.io/posts/black-hat-zig/</guid><description>This project provides many malware techniques implementation using Zig since I&amp;rsquo;m a huge fan of it. You can use this repo to weaponize Zig. Black-Hat-Zig is continuously updating to make sure it contains as more content as it could. It will be perfect if you want to create a PR for this project.
Black Hat Zig This is a really neat project I found that&amp;rsquo;s using a new modern programming language called zig.</description></item></channel></rss>